// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 69 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet  restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true /p:ArtifactsPath="/Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1/" /p:OutDir="/Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1/bin/Release/net8.0/" /p:OutputPath="/Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1/bin/Release/net8.0/" /p:PublishDir="/Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1/publish/" in /Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1
// command took 1.81 sec and exited with 1
// ***** Done, took 00:00:01 (1.86 sec)   *****
// Found 57 benchmarks:
//   SparseSetBenchmarks.Add_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Add_WithGrowth: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.TryAdd_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.TryAdd_WithDuplicates: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Get_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Get_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.TryGet_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.TryGet_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Has_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Has_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Remove_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Remove_EveryOther: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Remove_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Remove_NonExistent: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.GetAll_Iterate: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.GetAll_IterateWithSpan: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.MixedOperations_AddRemoveGet: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Churn_AddRemoveCycle: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Clear_FullSet: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
//   SparseSetBenchmarks.Add_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Add_WithGrowth: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.TryAdd_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.TryAdd_WithDuplicates: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Get_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Get_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.TryGet_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.TryGet_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Has_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Has_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Remove_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Remove_EveryOther: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Remove_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Remove_NonExistent: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.GetAll_Iterate: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.GetAll_IterateWithSpan: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.MixedOperations_AddRemoveGet: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Churn_AddRemoveCycle: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Clear_FullSet: .NET 8.0(Runtime=.NET 8.0) [EntityCount=10000]
//   SparseSetBenchmarks.Add_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Add_WithGrowth: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.TryAdd_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.TryAdd_WithDuplicates: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Get_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Get_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.TryGet_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.TryGet_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Has_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Has_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Remove_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Remove_EveryOther: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Remove_Random: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Remove_NonExistent: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.GetAll_Iterate: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.GetAll_IterateWithSpan: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.MixedOperations_AddRemoveGet: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Churn_AddRemoveCycle: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]
//   SparseSetBenchmarks.Clear_FullSet: .NET 8.0(Runtime=.NET 8.0) [EntityCount=100000]

// Build Error: Standard output: 
  
 Standard error: 
   Determining projects to restore...
/Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1/BenchmarkDotNet.Autogenerated.csproj : error NU1201: Project Crawl.Benchmark is not compatible with net8.0 (.NETCoreApp,Version=v8.0). Project Crawl.Benchmark supports: net9.0 (.NETCoreApp,Version=v9.0)
  Failed to restore /Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1/BenchmarkDotNet.Autogenerated.csproj (in 49 ms).
  Restored /Users/tom/dev/Crawl/Crawl.Game/Crawl.Game.csproj (in 1.34 sec).
  Restored /Users/tom/dev/Crawl/Crawl.Renderer/Crawl.Renderer.csproj (in 1.34 sec).
  Restored /Users/tom/dev/Crawl/Crawl.Benchmark/Crawl.Benchmark.csproj (in 1.38 sec).

// BenchmarkDotNet has failed to build the auto-generated boilerplate code.
// It can be found in /Users/tom/dev/Crawl/Crawl.Benchmark/bin/Release/net9.0/Crawl.Benchmark-.NET 8.0-1
// Please follow the troubleshooting guide: https://benchmarkdotnet.org/articles/guides/troubleshooting.html

// ** Remained 12 (17.4%) benchmark(s) to run. Estimated finish 2025-08-18 22:39 (0h 0m from now) **
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts/results/Crawl.Benchmark.SparseSetBenchmarks-report.csv
  BenchmarkDotNet.Artifacts/results/Crawl.Benchmark.SparseSetBenchmarks-report-github.md
  BenchmarkDotNet.Artifacts/results/Crawl.Benchmark.SparseSetBenchmarks-report.html

// * Detailed results *
SparseSetBenchmarks.Add_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]
Runtime = ; GC = 
There are not any results runs

// * Summary *

BenchmarkDotNet v0.15.2, macOS Sequoia 15.6 (24G84) [Darwin 24.6.0]
Apple M3, 1 CPU, 8 logical and 8 physical cores
.NET SDK 9.0.100
  [Host] : .NET 9.0.0 (9.0.24.52809), Arm64 RyuJIT AdvSIMD

Job=.NET 8.0  Runtime=.NET 8.0  

| Method         | EntityCount | Mean | Error | Rank |
|--------------- |------------ |-----:|------:|-----:|
| Add_Sequential | 1000        |   NA |    NA |    ? |

Benchmarks with issues:
  SparseSetBenchmarks.Add_Sequential: .NET 8.0(Runtime=.NET 8.0) [EntityCount=1000]

// * Legends *
  EntityCount : Value of the 'EntityCount' parameter
  Mean        : Arithmetic mean of all measurements
  Error       : Half of 99.9% confidence interval
  Rank        : Relative position of current benchmark mean among all benchmarks (Arabic style)
  1 ns        : 1 Nanosecond (0.000000001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
Run time: 00:00:00 (0.01 sec), executed benchmarks: 0

Global total time: 00:00:02 (2.1 sec), executed benchmarks: 0
// * Artifacts cleanup *
Artifacts cleanup is finished
